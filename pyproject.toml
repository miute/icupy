[build-system]
requires = ["scikit-build-core>=0.10"]
build-backend = "scikit_build_core.build"

[project]
name = "icupy"
version = "0.22.0.dev1"
requires-python = ">=3.10"
description = "Python bindings for ICU4C"
authors = [{ name = "Tetsuya Miura", email = "miute.dev@gmail.com" }]
readme = { file = "README.md", content-type = "text/markdown" }
license = "MIT"
keywords = ["icu4c", "unicode", "binding"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Programming Language :: C++",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Internationalization",
  "Topic :: Software Development :: Localization",
]
dependencies = []

[project.urls]
ICU = "https://icu.unicode.org/home"
Download = "https://github.com/miute/icupy/releases"
Source = "https://github.com/miute/icupy"
Changelog = "https://github.com/miute/icupy/blob/main/CHANGELOG.md"

[dependency-groups]
dev = ["pytest>=8.3.5"]

[tool.scikit-build]
minimum-version = "build-system.requires"
cmake.version = ">=3.15"
ninja.version = ">=1.11"
ninja.make-fallback = false
wheel.license-files = ["LICENSE"]
sdist.exclude = ["*"]
sdist.include = [
  "/CHANGELOG*",
  "/CMakeLists.txt",
  "/LICENSE*",
  "/pyproject.toml",
  "/README*",
  "/src/icupy/**/*.py",
  "/src/*.cpp",
  "/src/*.hpp",
  "/src/third_party/pybind11/include/",
  "/src/third_party/pybind11/tools/",
  "/src/third_party/pybind11/CMakeLists.txt",
  "/src/third_party/pybind11/LICEN[CS]E*",
  "/src/third_party/pybind11/README*",
]

[tool.uv]
package = false

[tool.pytest.ini_options]
addopts = ["--tb=short", "-ra", "--color=yes"]
testpaths = ["tests"]

[tool.coverage.run]
source = ["icupy"]

[tool.coverage.paths]
source = ["src/icupy", "*/icupy"]

[tool.ruff]
target-version = "py310"
src = ["src", "tests"]
extend-exclude = ["src/third_party"]
line-length = 96

[tool.ruff.lint]
extend-select = [
  "A",    # flake8-builtins (A)
  "ANN",  # flake8-annotations (ANN)
  "B",    # flake8-bugbear (B)
  "C4",   # flake8-comprehensions (C4)
  "EM",   # flake8-errmsg (EM)
  "FA",   # flake8-future-annotations (FA)
  "FURB", # refurb (FURB)
  "I",    # isort (I)
  "ICN",  # flake8-import-conventions (ICN)
  "ISC",  # flake8-implicit-str-concat (ISC)
  "N",    # pep8-naming (N)
  "PIE",  # flake8-pie (PIE)
  "PL",   # Pylint (PL)
  "PT",   # flake8-pytest-style (PT)
  "Q",    # flake8-quotes (Q)
  "RET",  # flake8-return (RET)
  "RSE",  # flake8-raise (RSE)
  "RUF",  # Ruff-specific rules (RUF)
  "S",    # flake8-bandit (S)
  "SIM",  # flake8-simplify (SIM)
  "SLF",  # flake8-self (SLF)
  "T20",  # flake8-print (T20)
  "TRY",  # tryceratops (TRY)
  "UP",   # pyupgrade (UP)
  "YTT",  # flake8-2020 (YTT)
]
extend-ignore = [
  "PLR0915", # Too many statements ({statements} > {max_statements})
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "PLR2004", # magic-value-comparison
  "PT011",   # pytest-raises-too-broad
  "PT018",   # pytest-composite-assertion
  "RUF001",  # ambiguous-unicode-character-string
  "RUF003",  # ambiguous-unicode-character-comment
  "S101",    # Use of assert detected
  "SIM201",  # negate-equal-op
  "SIM202",  # negate-not-equal-op
]

[tool.ruff.format]
line-ending = "lf"

[tool.black]
line-length = 96
target-version = ["py310", "py311", "py312", "py313"]
extend-exclude = """
^src/third_party
"""

[tool.isort]
line_length = 96
multi_line_output = 5
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
extend_skip = ["src/third_party"]

[tool.flake8]
max-line-length = 96
ignore = ["E203", "F824", "W503"]
exclude = ["src/third_party"]

[tool.mypy]
warn_unused_configs = true
warn_return_any = true
check_untyped_defs = true
verbosity = 0
exclude = ["^src/third_party"]
